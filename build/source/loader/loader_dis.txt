
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000066 memsz 0x00000066 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000055  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000011  00008055  00008055  00001055  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .comment      00000011  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00001078  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000127  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000091  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000f6  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000004c  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000168  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008055 l    d  .rodata	00000000 .rodata
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000003b show_msg
00000000 l    df *ABS*	00000000 loader_32.c
0000803e g     F .text	00000017 loader_entry
00008000 g       .text	00000000 _start
00009066 g       .rodata	00000000 __bss_start
00009066 g       .rodata	00000000 _edata
00009068 g       .rodata	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:	
	jmp loader_entry
    8000:	e9 3b 00             	jmp    803e <loader_entry>

00008003 <show_msg>:
__asm__(".code16gcc");

static void show_msg (const char *msg)
{
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while((c = *msg++) != '\0')
    800c:	eb 0c                	jmp    801a <show_msg+0x17>
    {
        asm(
    800e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8014:	b4 0e                	mov    $0xe,%ah
    8016:	88 c0                	mov    %al,%al
    8018:	cd 10                	int    $0x10
    while((c = *msg++) != '\0')
    801a:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    801f:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8024:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8029:	67 66 0f b6 00       	movzbl (%eax),%eax
    802e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8032:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8037:	75 d5                	jne    800e <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    8039:	90                   	nop
    803a:	66 c9                	leavel 
    803c:	66 c3                	retl   

0000803e <loader_entry>:

void loader_entry(void)
{
    803e:	66 55                	push   %ebp
    8040:	66 89 e5             	mov    %esp,%ebp
    show_msg("........loadeing");
    8043:	66 68 55 80 00 00    	pushl  $0x8055
    8049:	66 e8 b4 ff ff ff    	calll  8003 <show_msg>
    804f:	66 83 c4 04          	add    $0x4,%esp
    for(;;){}
    8053:	eb fe                	jmp    8053 <loader_entry+0x15>
