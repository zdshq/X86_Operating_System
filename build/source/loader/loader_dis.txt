
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000002c8 memsz 0x000002c8 flags r-x
    LOAD off    0x000012c8 vaddr 0x000092c8 paddr 0x000092c8 align 2**12
         filesz 0x00000018 memsz 0x0000006c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000293  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000035  00008293  00008293  00001293  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000092c8  000092c8  000012c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  000092e0  000092e0  000012e0  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000012f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003de  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016b  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b0  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000029a  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008293 l    d  .rodata	00000000 .rodata
000092c8 l    d  .data	00000000 .data
000092e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000002a inb
0000802d l     F .text	0000002d outb
0000805a l     F .text	0000000b cli
00008065 l     F .text	0000003c lgdt
000092e0 l     O .bss	00000054 boot_info
000080a1 l     F .text	0000003b show_msg
000080dc l     F .text	00000137 detect_memory
00008213 l     F .text	0000005d enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008270 g     F .text	00000023 loader_entry
000092c8 g     O .data	00000018 gdt_table
00008000 g       .text	00000000 _start
000092e0 g       .bss	00000000 __bss_start
000092e0 g       .data	00000000 _edata
00009334 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:	
	jmp loader_entry
    8000:	e9 6d 02             	jmp    8270 <loader_entry>

00008003 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H
#include "types.h"


static inline uint8_t inb (uint16_t port) {
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 14          	sub    $0x14,%esp
    800c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8011:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv) : [p]"d"(port));
    8015:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    801b:	66 89 c2             	mov    %eax,%edx
    801e:	ec                   	in     (%dx),%al
    801f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8023:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8029:	66 c9                	leavel 
    802b:	66 c3                	retl   

0000802d <outb>:

static inline void outb (uint16_t port,uint8_t data) {
    802d:	66 55                	push   %ebp
    802f:	66 89 e5             	mov    %esp,%ebp
    8032:	66 83 ec 08          	sub    $0x8,%esp
    8036:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    803b:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8040:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8044:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    // outb al, dx
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    8048:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    804e:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8054:	ee                   	out    %al,(%dx)
}
    8055:	90                   	nop
    8056:	66 c9                	leavel 
    8058:	66 c3                	retl   

0000805a <cli>:

static inline void cli(void) {  // 只能在调用的此文件里面使用
    805a:	66 55                	push   %ebp
    805c:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    805f:	fa                   	cli    
}
    8060:	90                   	nop
    8061:	66 5d                	pop    %ebp
    8063:	66 c3                	retl   

00008065 <lgdt>:

static inline void sti(void) {  // 关中断
    __asm__ __volatile__("sti");
}
static inline void lgdt(uint32_t start, uint32_t size) {
    8065:	66 55                	push   %ebp
    8067:	66 89 e5             	mov    %esp,%ebp
    806a:	66 83 ec 10          	sub    $0x10,%esp
    struct {
        uint16_t limit;  // 块大小
        uint32_t start15_0;  //起始地址低16位
        uint32_t start31_16;  // 起始地址高16位
    } gdt;
    gdt.start31_16 = start>>16;
    806e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8073:	66 c1 e8 10          	shr    $0x10,%eax
    8077:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    gdt.start15_0 = start&0XFFFF;
    807c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8081:	66 0f b7 c0          	movzwl %ax,%eax
    8085:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    gdt.limit = size - 1;
    808a:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    808f:	66 83 e8 01          	sub    $0x1,%eax
    8093:	67 89 45 f4          	mov    %ax,-0xc(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    8097:	67 0f 01 55 f4       	lgdtw  -0xc(%ebp)
}
    809c:	90                   	nop
    809d:	66 c9                	leavel 
    809f:	66 c3                	retl   

000080a1 <show_msg>:
#include "loader.h"

static boot_info_t boot_info;

static void show_msg (const char *msg)
{
    80a1:	66 55                	push   %ebp
    80a3:	66 89 e5             	mov    %esp,%ebp
    80a6:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while((c = *msg++) != '\0')
    80aa:	eb 0c                	jmp    80b8 <show_msg+0x17>
    {
        asm(
    80ac:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    80b2:	b4 0e                	mov    $0xe,%ah
    80b4:	88 c0                	mov    %al,%al
    80b6:	cd 10                	int    $0x10
    while((c = *msg++) != '\0')
    80b8:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80bd:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    80c2:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    80c7:	67 66 0f b6 00       	movzbl (%eax),%eax
    80cc:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    80d0:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    80d5:	75 d5                	jne    80ac <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10"::[ch]"r"(c)
        );
    }
}
    80d7:	90                   	nop
    80d8:	66 c9                	leavel 
    80da:	66 c3                	retl   

000080dc <detect_memory>:

static void detect_memory (void) {
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 57                	push   %edi
    80e3:	66 56                	push   %esi
    80e5:	66 53                	push   %ebx
    80e7:	66 83 ec 30          	sub    $0x30,%esp
    show_msg("try to detect memory");
    80eb:	66 68 93 82 00 00    	pushl  $0x8293
    80f1:	66 e8 aa ff ff ff    	calll  80a1 <show_msg>
    80f7:	66 83 c4 04          	add    $0x4,%esp
    uint32_t contID = 0;
    80fb:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8102:	00 00 
    uint32_t signature, bytes;
    boot_info.ram_region_count=0;
    8104:	66 c7 06 30 93 00 00 	movl   $0x0,-0x6cd0
    810b:	00 00 
    SMAP_entry_t smap_entry;
    
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    810d:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8114:	00 00 
    8116:	e9 ce 00             	jmp    81e7 <detect_memory+0x10b>
        SMAP_entry_t * entry = &smap_entry;
    8119:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    811e:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__ ("int  $0x15" 
    8123:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8129:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    812e:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8134:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    813a:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    813f:	66 89 f7             	mov    %esi,%edi
    8142:	cd 15                	int    $0x15
    8144:	66 89 da             	mov    %ebx,%edx
    8147:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    814c:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    8151:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
				: "=a"(signature), "=c"(bytes), "=b"(contID)
				: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if(signature != 0x534D4150) { //判断是否正确
    8156:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    815d:	4d 53 
    815f:	74 13                	je     8174 <detect_memory+0x98>
            show_msg("failed\r\n");
    8161:	66 68 a8 82 00 00    	pushl  $0x82a8
    8167:	66 e8 34 ff ff ff    	calll  80a1 <show_msg>
    816d:	66 83 c4 04          	add    $0x4,%esp
            return ; // error
    8171:	e9 90 00             	jmp    8204 <detect_memory+0x128>
        }
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0) {
    8174:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    817a:	76 13                	jbe    818f <detect_memory+0xb3>
    817c:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8181:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8186:	66 83 e0 01          	and    $0x1,%eax
    818a:	66 85 c0             	test   %eax,%eax
    818d:	74 51                	je     81e0 <detect_memory+0x104>
			// ignore this entry
            continue;
        }
        if(entry->Type == 1)
    818f:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8194:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8199:	66 83 f8 01          	cmp    $0x1,%eax
    819d:	75 37                	jne    81d6 <detect_memory+0xfa>
        {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    819f:	66 a1 30 93          	mov    0x9330,%eax
    81a3:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81a8:	67 66 8b 12          	mov    (%edx),%edx
    81ac:	67 66 89 14 c5 e0 92 	mov    %edx,0x92e0(,%eax,8)
    81b3:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count++].size = entry->LengthL;
    81b5:	66 a1 30 93          	mov    0x9330,%eax
    81b9:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    81be:	66 89 16 30 93       	mov    %edx,-0x6cd0
    81c3:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81c8:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    81cd:	67 66 89 14 c5 e4 92 	mov    %edx,0x92e4(,%eax,8)
    81d4:	00 00 
        }
        if(contID == 0){
    81d6:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    81dc:	74 15                	je     81f3 <detect_memory+0x117>
    81de:	eb 01                	jmp    81e1 <detect_memory+0x105>
            continue;
    81e0:	90                   	nop
    for(int i = 0; i < BOOT_RAM_REGION_MAX; i++){
    81e1:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    81e7:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    81ed:	0f 8e 28 ff          	jle    8119 <detect_memory+0x3d>
    81f1:	eb 01                	jmp    81f4 <detect_memory+0x118>
            break;  //检查完毕
    81f3:	90                   	nop
        }
    }
    show_msg("ok.\r\n");
    81f4:	66 68 b1 82 00 00    	pushl  $0x82b1
    81fa:	66 e8 a1 fe ff ff    	calll  80a1 <show_msg>
    8200:	66 83 c4 04          	add    $0x4,%esp
}
    8204:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8209:	66 5b                	pop    %ebx
    820b:	66 5e                	pop    %esi
    820d:	66 5f                	pop    %edi
    820f:	66 5d                	pop    %ebp
    8211:	66 c3                	retl   

00008213 <enter_protect_mode>:
    {0,0,0,0},
    {0xFFFF, 0x0000, 0x9a00, 0x00cf},
    {0xFFFF, 0x0000, 0x9200, 0x00cf}
};

static void enter_protect_mode(void) {
    8213:	66 55                	push   %ebp
    8215:	66 89 e5             	mov    %esp,%ebp
    8218:	66 83 ec 10          	sub    $0x10,%esp
    cli();
    821c:	66 e8 38 fe ff ff    	calll  805a <cli>
    uint8_t v = inb(0x92);
    8222:	66 68 92 00 00 00    	pushl  $0x92
    8228:	66 e8 d5 fd ff ff    	calll  8003 <inb>
    822e:	66 83 c4 04          	add    $0x4,%esp
    8232:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    8236:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    823c:	66 83 c8 02          	or     $0x2,%eax
    8240:	66 0f b6 c0          	movzbl %al,%eax
    8244:	66 50                	push   %eax
    8246:	66 68 92 00 00 00    	pushl  $0x92
    824c:	66 e8 db fd ff ff    	calll  802d <outb>
    8252:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    8256:	66 b8 c8 92 00 00    	mov    $0x92c8,%eax
    825c:	66 6a 18             	pushl  $0x18
    825f:	66 50                	push   %eax
    8261:	66 e8 fe fd ff ff    	calll  8065 <lgdt>
    8267:	66 83 c4 08          	add    $0x8,%esp
}
    826b:	90                   	nop
    826c:	66 c9                	leavel 
    826e:	66 c3                	retl   

00008270 <loader_entry>:

void loader_entry(void)
{
    8270:	66 55                	push   %ebp
    8272:	66 89 e5             	mov    %esp,%ebp
    show_msg("........loadeing");
    8275:	66 68 b7 82 00 00    	pushl  $0x82b7
    827b:	66 e8 20 fe ff ff    	calll  80a1 <show_msg>
    8281:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8285:	66 e8 51 fe ff ff    	calll  80dc <detect_memory>
    enter_protect_mode();
    828b:	66 e8 82 ff ff ff    	calll  8213 <enter_protect_mode>
    for(;;){}
    8291:	eb fe                	jmp    8291 <loader_entry+0x21>
