
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf:     file format elf32-i386
H:/project/x86_operating/diy-x86os/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x0000000a memsz 0x0000000a flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000a  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001020  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e5  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000040  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ef  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000002c  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015a  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00000000 l    df *ABS*	00000000 loader_32.c
00008003 g     F .text	00000007 loader_entry
00008000 g       .text	00000000 _start
0000900a g       .text	00000000 __bss_start
0000900a g       .text	00000000 _edata
0000900c g       .text	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:	
	jmp loader_entry
    8000:	e9 00 00             	jmp    8003 <loader_entry>

00008003 <loader_entry>:
__asm__(".code16gcc");

void loader_entry(void)
{
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    for(;;){}
    8008:	eb fe                	jmp    8008 <loader_entry+0x5>
