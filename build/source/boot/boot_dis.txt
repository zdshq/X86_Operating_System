
H:/project/x86_operating/diy-x86os/start/start/build/source/boot/boot.elf:     file format elf32-i386
H:/project/x86_operating/diy-x86os/start/start/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000c2c memsz 0x00000c2c flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000002c  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e1  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000040  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000ec  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000106  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007dfe l    d  boot_end	00000000 boot_end
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 CMakeFiles/boot.dir/start.S.obj
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c15 g     F .text	00000017 boot_entry
00007c00 g       .text	00000000 _start
00008c2c g       .text	00000000 __bss_start
00008c2c g       .text	00000000 _edata
00008c2c g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16
 	.text
	.global _start
	.extern boot_entry
_start:
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds   //初始化所有的寄存器
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs
	
	jmp boot_entry
    7c0d:	e9 05 00             	jmp    7c15 <boot_entry>
	mov _start, %esp  // 
    7c10:	66 8b 26 00 7c       	mov    0x7c00,%esp

00007c15 <boot_entry>:
#define LOADER_START_ADDR 0x8000
/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c15:	66 55                	push   %ebp
    7c17:	66 89 e5             	mov    %esp,%ebp
    7c1a:	66 83 ec 08          	sub    $0x8,%esp
    ((void (*) (void))LOADER_START_ADDR)();
    7c1e:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c24:	66 ff d0             	calll  *%eax
} 
    7c27:	90                   	nop
    7c28:	66 c9                	leavel 
    7c2a:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
